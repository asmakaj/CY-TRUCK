STRUCTURE DU PROJET

• data > fichier.csv (= chemin pour acceder au fichier depuis votre pc car trop lourd pour vscode et github) /Users/deeu/Desktop/data.csv
• progc > source.c (= programe.c)
        > makefile
        > executable (= prog)
        > fichier.h
• images
• temp
• demo
• script.sh 

Pour compiler il faut écrire par ex: ./script.sh /Users/deeu/Desktop/data.csv -d1 -l <=> ./script.sh fichier.csv -traitement1 -traitement2 ...
Il faut avant donner les droits d'execution au script.sh : chmod +x script.sh
Lors du commit, supprimer le data.csv (avec la fleche à coté du plus) avant la validation des modifications, ou ne simplement pas le commit
------------------------------------------------------------------------------------------------
STRUCTURE DU SCRIPT SHELL

Fonctions :

-	Création des fichiers temp et images
-	Vérification de l’exécutable c
-	Création des graphiques avec gnuplot
-	Affichage du temps d’exécution


MAIN :

1-	Récupération et vérification (existence et .csv) du fichier.csv
2-	Création du fichier data et copie du fichier.csv dedans
3-	Cas du traitement -h
4-	Vérification des dossier temp et images
5-	Vérification de l’exécutable c
6-	Exécutions des différents traitements

Maintenant, le fichier.csv = intput_file et non $1 qui correspond au premier traitement.
Pour avoir accès au fichier, il faut utiliser la variable intput_file.

--------------------------------------------------------------------------------------------------
ORGANISATION DES TRAITEMENTS
-d1 conducteurs avec le plus de trajets --> Deulyne 
-d2 conducteurs et la plus grande distance --> Emma
-l les 10 trajets les plus longs --> Asma
-t les 10 villes les plus traversées --> Asma
-s statistiques sur les étapes --> Deulyne 

Pour chaque traitement, il ne faut pas oublier : 
- l'utilisation des fichiers intermédiare dans 'temp'
- les résultats d'execution précedente seront dans ‘demo’
- de créer le graphique montrant les résultats dans 'images'
- d'afficher la durée de chaque traitement

---------------------------------------------------------------------------------------------------

Traitement [S] : statistiques sur les étapes : option -s
Pour ce traitement, on cherche à récupérer les distances minimales, maximales et moyennes des étapes, et ce, pour chaque trajet.


1- on récupère les différents trajets de chaque conducteurs
cut qui récupere les deux trajets;étapes;distances
Route ID;Step ID;Distance
2- puis on recupère les tajets min , max, et moyens
faire abr qui a pour chainon une structure (route ID, step ID, distance(somme ?), min, max,nombre de fois on on est passée danas la ville)
Si id exist alors on update les différents champs 

3- Ces données seront triées par «distance_maxi – distance_mini» par ordre décroissant, avec AVL
et on ne conservera que les 50 premières valeurs.
recuperer les chainons de l'abr et les mettre dans l'avl puis afficher en utilisant un parcours infixe inverse

- COMMENTER CHAQUE FONCTIONS
Les fonctions avl ont été récupérer du cours


typedef struct ABR{
  int route_ID;
  int step_ID;
  float distance;
  float min;
  float max;
  int n;
  struct ABR* pLeft;
  struct ABR* pRight;
}ABR_Tree;

typedef ABR_Tree* pTree;

typedef struct AVL{
    int route_ID;
    float min;
    float max;
    float moy;
    float diff;
    int eq;
    struct AVL* pLeft;
    struct AVL* pRight;
}AVL_Tree;

typedef AVL_Tree* spTree;

Faire ABR
readCSV(data.csv, abr){
  insertABR(abr, elmt){
    createNodeABR(elmt){
    }
  }
}

Faire AVL